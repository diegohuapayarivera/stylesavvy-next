/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/NdDr7C5cM40
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Prata } from 'next/font/google'
import { Libre_Baskerville } from 'next/font/google'

prata({
  subsets: ['latin'],
  display: 'swap',
})

libre_baskerville({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
/* eslint-disable @next/next/no-img-element */

import { useEffect, useMemo } from "react";
import Link from "next/link";

import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";

import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { groupByCodeClothe } from "@/helpers/getProducts";
import AccordionFilter from "./AccordionFilter";
import useProduct from "@/hook/useProduct";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../ui/dialog";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "../ui/carousel";

export function Store() {
  const {
    products,
    setproducts,
    selectedCategory,
    selectedColor,
    selectedSize,
    getCategoryesUniques,
    handleCategoryesChange,
  } = useProduct();

  const url =
    "https://script.google.com/macros/s/AKfycbxlAcQal_3wvGOYMuZtw8_mT1g2ygPRNyh0qf77nxdCNClt2iUxu07lCQFXm70PhX4/exec";

  useEffect(() => {
    async function fetchData() {
      const respuesta = await fetch(url);
      const productos = await respuesta.json();

      const productosDisponibles = productos.filter(
        (producto) => producto.estado === "disponible"
      );
      const agrupados = groupByCodeClothe(productosDisponibles);
      setproducts(agrupados);
    }

    fetchData();
  }, [setproducts]);

  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      if (
        selectedCategory.length > 0 &&
        !selectedCategory.some((category) =>
          product.categorys.includes(category)
        )
      ) {
        return false;
      }
      if (
        selectedColor.length > 0 &&
        !selectedColor.some((color) => product.colors.includes(color))
      ) {
        return false;
      }
      if (
        selectedSize.length > 0 &&
        !selectedSize.some((size) => product.sizes.includes(size))
      ) {
        return false;
      }
      return true;
    });
  }, [selectedCategory, selectedColor, selectedSize, products]);

  return (
    <div>
      <header className="bg-primary text-primary-foreground py-4 md:py-6 lg:py-8">
        <div className="container px-4 md:px-6 max-w-10xl mx-auto flex items-center justify-between">
          <Link href="#" prefetch={false}>
            <div className="flex items-center gap-2">
              <img src="/icono4.png" alt="icono" className="h-12 w-12" />
              <span className="text-lg md:text-xl lg:text-3xl font-bold">
                StyleSavvy
              </span>
            </div>
          </Link>
          <nav className="hidden md:flex items-center gap-4 lg:gap-6" />
          <div className="md:hidden" />
        </div>
      </header>
      <div className="container px-4 md:px-6 max-w-6xl mx-auto py-12">
        <div className="grid md:grid-cols-[240px_1fr] gap-8">
          <div>
            <div>
              <div className="hidden md:grid gap-6">
                <h2 className="text-3xl font-bold mb-4">Filtros</h2>
                <AccordionFilter
                  title={"Categoria"}
                  categoryes={getCategoryesUniques("Categoria")}
                  handleCategoryChange={handleCategoryesChange}
                  selectedCategory={selectedCategory}
                />

                <AccordionFilter
                  title={"Color"}
                  categoryes={getCategoryesUniques("Color")}
                  handleCategoryChange={handleCategoryesChange}
                  selectedCategory={selectedColor}
                />

                <AccordionFilter
                  title={"Talla"}
                  categoryes={getCategoryesUniques("Talla")}
                  handleCategoryChange={handleCategoryesChange}
                  selectedCategory={selectedSize}
                />
              </div>
            </div>
            <div className="md:hidden flex items-center justify-between">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <FilterIcon className="w-4 h-4" />
                    Filtros
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-[300px]">
                  <div className="p-4 grid gap-6">
                    <AccordionFilter
                      title={"Categoria"}
                      categoryes={getCategoryesUniques("Categoria")}
                      handleCategoryChange={handleCategoryesChange}
                      selectedCategory={selectedCategory}
                    />
                    <AccordionFilter
                      title={"Color"}
                      categoryes={getCategoryesUniques("Color")}
                      handleCategoryChange={handleCategoryesChange}
                      selectedCategory={selectedColor}
                    />

                    <AccordionFilter
                      title={"Talla"}
                      categoryes={getCategoryesUniques("Talla")}
                      handleCategoryChange={handleCategoryesChange}
                      selectedCategory={selectedSize}
                    />
                  </div>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <div className="grid gap-8">
            <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
              {filteredProducts.map((product) => (
                <div
                  key={product.code_clothe}
                  className="bg-card text-card-foreground rounded-lg overflow-hidden shadow-sm"
                >
                  <div className="p-4 grid gap-2">
                    <img
                      src={product.clothes[0].image}
                      alt={product.clothes[0].code}
                      width={300}
                      height={300}
                      className="rounded-md object-cover w-full aspect-square"
                    />
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold text-lg">{product.name}</h3>
                      <span className="font-semibold">S/{product.price}</span>
                    </div>
                    <div className="grid gap-2">
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Tallas</h4>
                        <div className="flex gap-2">
                          {product.colors
                            .filter(
                              (valor, indice, self) =>
                                self.indexOf(valor) === indice
                            )
                            .map((size) => (
                              <Badge
                                key={size}
                                variant="outline"
                                className="px-2 py-1"
                              >
                                {size}
                              </Badge>
                            ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Colores</h4>
                        <div className="flex flex-wrap gap-2">
                          {product.sizes
                            .filter(
                              (valor, indice, self) =>
                                self.indexOf(valor) === indice
                            )
                            .map((color) => {
                              return (
                                <Badge
                                  key={color}
                                  variant="outline"
                                  className={`px-2 py-1 bg-${color}-500 text-${color}-50`}
                                >
                                  {color}
                                </Badge>
                              );
                            })}
                        </div>
                      </div>
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button
                            className="w-full flex border-2 border-white items-center justify-center gap-2"
                            size="icon"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 10a7 7 0 1 0 14 0a7 7 0 1 0-14 0m18 11l-6-6"/></svg>
                            Ver producto
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-[425px]">
                          <DialogHeader>
                            <DialogTitle>Referencia del producto</DialogTitle>
                          </DialogHeader>
                          <Carousel className="w-full max-w-4xl relative">
                            <CarouselContent>
                              {product.clothes.map((clote) => (
                                <CarouselItem key={clote.code}>
                                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2 items-center">
                                    <img
                                      src={clote.image}
                                      alt={clote.code}
                                      width={600}
                                      height={600}
                                      className="rounded-lg object-cover w-full aspect-square"
                                    />
                                    <div className="grid gap-4">
                                      <div className="grid gap-2">
                                        <h3 className="text-xl font-bold">
                                          {product.name}
                                        </h3>
                                        <p className="text-muted-foreground">
                                          Talla: {clote.sizes}
                                        </p>
                                      </div>

                                      <div className="flex items-center gap-2">
                                        <p className="text-muted-foreground">
                                          Color: {clote.colors}
                                        </p>
                                      </div>
                                      
                                    </div>
                                  </div>
                                </CarouselItem>
                              ))}
                            </CarouselContent>
                            <CarouselPrevious className="absolute left-4 top-1/2 -translate-y-1/2" />
                            <CarouselNext className="absolute right-4 top-1/2 -translate-y-1/2"/>
                          </Carousel>
                        </DialogContent>
                      </Dialog>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}
