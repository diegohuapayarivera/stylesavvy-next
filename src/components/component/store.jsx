/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/NdDr7C5cM40
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Prata } from 'next/font/google'
import { Libre_Baskerville } from 'next/font/google'

prata({
  subsets: ['latin'],
  display: 'swap',
})

libre_baskerville({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
/* eslint-disable @next/next/no-img-element */

import { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import "boxicons";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import {
  Drawer,
  DrawerTrigger,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Input } from "@/components/ui/input";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

export function Store() {
  const [products, setproducts] = useState([]);
  const [cart, setCart] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState([]);
  const [selectedColor, setSelectedColor] = useState([]);
  const [selectedSize, setSelectedSize] = useState([]);

  const url =
    "https://script.google.com/macros/s/AKfycbxWVVD2tOQJ6iueTdGIiO1OGxeghIA7jTKur2xoVgLDLn7jyI3AvTRlmz0ug31ALmT2/exec";

  useEffect(() => {
    async function fetchData() {
      const respuesta = await fetch(url);
      const productos = await respuesta.json();

      const productosDisponibles = productos.filter(
        (producto) => producto.estado === "disponible"
      );

      // Agrupa los productos
      const agrupados = agruparProductos(productosDisponibles);
      setproducts(agrupados);

    }

    fetchData();
  }, []);

  function groupByCodeClothe(data) {
    const result = [];

    data.forEach((item) => {
      // Buscar si ya existe un objeto con el mismo code_clothe
      let existing = result.find((obj) => obj.code_clothe === item.code_clothe);

      if (existing) {
        // Si existe, agregar el nuevo "clothe" al array "clothes"
        existing.clothes.push({
          code: item.code,
          sizes: item.sizes,
          colors: item.colors,
          image: item.image,
        });
      } else {
        // Si no existe, crear un nuevo objeto y agregarlo al resultado
        result.push({
          code_clothe: item.code_clothe,
          name: item.name,
          price: item.price,
          categorys: item.categorys,
          estado: item.estado,
          clothes: [
            {
              code: item.code,
              sizes: item.sizes,
              colors: item.colors,
              image: item.image,
            },
          ],
        });
      }
    });

    return result;
  }

  

  const filteredProducts = useMemo(() => {
    
    return products.filter((product) => {
      /**if (
        selectedCategory.length > 0 &&
        !selectedCategory.some((category) =>
          product.categorys.includes(category)
        )
      ) {
        return false;
      }
      if (
        selectedColor.length > 0 &&
        !selectedColor.some((color) => product.clothes.includes({colors: color}))
      ) {
        return false;
      }
      if (
        selectedSize.length > 0 &&
        !selectedSize.some((size) => product.clothes.includes(size))
      ) {
        return false;
      }
      return true;
      */
      const matchesCategory = selectedCategory.length === 0 || selectedCategory.includes(product.categorys);
      const matchesColor = selectedColor.length === 0 || product.clothes.some(clothe => selectedColor.includes(clothe.colors));
      const matchesSize = selectedSize.length === 0 || product.clothes.some(clothe => selectedSize.includes(clothe.sizes));
      
      return matchesCategory && matchesColor && matchesSize;
    });
  }, [selectedCategory, selectedColor, selectedSize, products]);

  const handleCategoryChange = (category) => {
    if (selectedCategory.includes(category)) {
      setSelectedCategory(selectedCategory.filter((item) => item !== category));
    } else {
      setSelectedCategory([...selectedCategory, category]);
    }
  };

  const handleColorChange = (color) => {
    if (selectedColor.includes(color)) {
      setSelectedColor(selectedColor.filter((item) => item !== color));
    } else {
      setSelectedColor([...selectedColor, color]);
    }
  };

  const handleSizeChange = (size) => {
    if (selectedSize.includes(size)) {
      setSelectedSize(selectedSize.filter((item) => item !== size));
    } else {
      setSelectedSize([...selectedSize, size]);
    }
  };

  function obtenerCategoriasUnicas(productos) {
    const categorias = new Set();

    productos.forEach((producto) => {
      categorias.add(producto.categorys);
    });

    return Array.from(categorias);
  }

  function obtenerColoresUnicas(productos) {
    const colores = new Set();

    productos.forEach((producto) => {
      producto.clothes.forEach((clothe) => {
        colores.add(clothe.colors);
      });
    });

    return Array.from(colores);
  }

  function obtenerTallasUnicas(productos) {
    const tallas = new Set();

    productos.forEach((producto) => {
      producto.clothes.forEach((clothe) => {
        tallas.add(clothe.sizes);
      });
    });

    return Array.from(tallas);
  }

  function addItem(item, product) {
    console.log(cart);
    console.log(item);
    const itemExists = cart.find(
      (productItem) => productItem.code === item.code
    );
    if (itemExists) {
      const updateItem = cart.map((productItem) =>
        productItem.code === item.code
          ? { ...productItem, quantity: productItem.quantity + 1 }
          : productItem
      );
      setCart(updateItem);
    } else {
      const newItem = {
        name: product.name,
        code: item.code,
        size: item.sizes,
        color: item.colors,
        quantity: 1,
        price: product.price,
        image: item.image,
      };
      setCart([...cart, newItem]);
    }
  }

  const totalAmount = useMemo(
    () => cart.reduce((total, item) => total + item.quantity * item.price, 0),
    [cart]
  );

  function colorUnique(clothes) {
    const colorUniques = new Set();
    clothes.map((item) => {
      colorUniques.add(item.colors);
    });
    return Array.from(colorUniques);
  }

  function sizesUnique(clothes) {
    const sizesUniques = new Set();
    clothes.map((item) => {
      sizesUniques.add(item.sizes);
    });
    return Array.from(sizesUniques);
  }

  return (
    <div>
      <header className="bg-primary text-primary-foreground py-4 md:py-6 lg:py-8">
        <div className="container px-4 md:px-6 max-w-10xl mx-auto flex items-center justify-between">
          <Link href="#" prefetch={false}>
            <div className="flex items-center gap-2">
              <img src="/icono4.png" alt="icono" className="h-12 w-12" />
              <span className="text-lg md:text-xl lg:text-3xl font-bold">
                StyleSavvy
              </span>
            </div>
          </Link>
          <nav className="hidden md:flex items-center gap-4 lg:gap-6 border-white">
            <Drawer>
              <DrawerTrigger asChild>
                <Button className="w-full flex border-2 border-white items-center justify-center gap-2">
                  <box-icon name="cart" color="#FFF"></box-icon>
                  Carrito
                </Button>
              </DrawerTrigger>
              <DrawerContent className="w-[400px] mx-auto">
                <DrawerHeader>
                  <DrawerTitle>Carrito</DrawerTitle>
                </DrawerHeader>
                {cart.length === 0 ? (
                  <div className="p-4 text-center">
                    <p className="text-muted-foreground">
                      Tu carrito esta vacio.
                    </p>
                  </div>
                ) : (
                  <div className="grid gap-4">
                    {cart.map((product) => (
                      <div
                        key={product.image}
                        className="flex items-center gap-4"
                      >
                        <img
                          src={product.image}
                          alt={product.name}
                          width={20}
                          height={20}
                          className="rounded-md object-cover w-10 aspect-square pl-2"
                        />
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="font-semibold">{product.name} - {product.color}</h3>
                            <span className="font-semibold">
                              ${(product.price * product.quantity).toFixed(2)}
                            </span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <span>Cantidad: </span>
                            {product.quantity}
                            <span>Talla: </span>
                            {product.size}
                          </div>
                        </div>
                        <Button variant="ghost" size="icon">
                          <box-icon name="trash" color="#000"></box-icon>
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
                {cart.length > 0 && (
                  <>
                    <Separator className="my-4" />
                    <div className="flex items-center justify-between px-4 py-2 bg-muted rounded-b-md">
                      <span className="font-semibold">Total:</span>
                      <span className="font-semibold">
                        ${totalAmount.toFixed(2)}
                      </span>
                    </div>
                    <div className="px-4 py-4">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button
                            className="w-full flex border-2 border-white items-center justify-center gap-2"
                            size="icon"
                          >
                            <box-icon name="basket" color="#fff"></box-icon>
                            Comprar
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-[425px]">
                          <DialogHeader>
                            <DialogTitle>
                              Escogiste el outfit Perfecto 😍
                            </DialogTitle>
                            <DialogDescription>
                              Ahora necesitamos que coloques tu nombre y celular
                              para hacer el pedido✨.
                            </DialogDescription>
                          </DialogHeader>
                          <div className="grid gap-4 py-4">
                            <div className="grid items-center grid-cols-4 gap-4">
                              <Label htmlFor="name" className="text-right">
                                Nombre
                              </Label>
                              <Input
                                id="name"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                placeholder="Juan Perez Soto"
                                className="col-span-3"
                              />
                            </div>
                            <div className="grid items-center grid-cols-4 gap-4">
                              <Label htmlFor="phone" className="text-right">
                                Celular
                              </Label>
                              <Input
                                id="phone"
                                value={phone}
                                onChange={(e) => setPhone(e.target.value)}
                                className="col-span-3"
                                placeholder="+51999888777"
                              />
                            </div>
                          </div>
                          <DialogFooter>
                            <Button >
                              Checkout
                            </Button>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </div>
                  </>
                )}
              </DrawerContent>
            </Drawer>
          </nav>
        </div>
      </header>
      <div className="container px-4 md:px-6 max-w-6xl mx-auto py-12">
        <div className="grid md:grid-cols-[240px_1fr] gap-8">
          <div>
            <div>
              <div className="hidden md:grid gap-6">
                <h2 className="text-3xl font-bold mb-4">Filtros</h2>
                <Accordion type="single" collapsible>
                  <AccordionItem value="category">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Categorias</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerCategoriasUnicas(products).map((category) => (
                          <Label
                            key={category}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedCategory.includes(category)}
                              onCheckedChange={() =>
                                handleCategoryChange(category)
                              }
                            />
                            {category}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
                <Accordion type="single" collapsible>
                  <AccordionItem value="color">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Colores</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerColoresUnicas(products).map((color) => (
                          <Label
                            key={color}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedColor.includes(color)}
                              onCheckedChange={() => handleColorChange(color)}
                            />
                            {color}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
                <Accordion type="single" collapsible>
                  <AccordionItem value="size">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Tallas</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerTallasUnicas(products).map((size) => (
                          <Label
                            key={size}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedSize.includes(size)}
                              onCheckedChange={() => handleSizeChange(size)}
                            />
                            {size}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
            <div className="md:hidden flex items-center justify-between">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <FilterIcon className="w-4 h-4" />
                    Filtros
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-[300px]">
                  <div className="p-4 grid gap-6">
                    <Accordion type="single" collapsible>
                      <AccordionItem value="category">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">
                            Categoria
                          </h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerCategoriasUnicas(products).map(
                              (category) => (
                                <Label
                                  key={category}
                                  className="flex items-center gap-2 font-normal"
                                >
                                  <Checkbox
                                    checked={selectedCategory.includes(
                                      category
                                    )}
                                    onCheckedChange={() =>
                                      handleCategoryChange(category)
                                    }
                                  />
                                  {category}
                                </Label>
                              )
                            )}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="color">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">Color</h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerColoresUnicas(products).map((color) => (
                              <Label
                                key={color}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={selectedColor.includes(color)}
                                  onCheckedChange={() =>
                                    handleColorChange(color)
                                  }
                                />
                                {color}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="size">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">Talla</h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerTallasUnicas(products).map((size) => (
                              <Label
                                key={size}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={selectedSize.includes(size)}
                                  onCheckedChange={() => handleSizeChange(size)}
                                />
                                {size}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </div>
                </DropdownMenuContent>
              </DropdownMenu>
              <Drawer>
                <DrawerTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <box-icon name="cart" color="#000"></box-icon>
                    Carrito
                  </Button>
                </DrawerTrigger>
                <DrawerContent className="w-[400px] mx-auto">
                  <DrawerHeader>
                    <DrawerTitle>Cart</DrawerTitle>
                  </DrawerHeader>
                  <div className="grid gap-4">
                    {cart.map((product) => (
                      <div
                        key={product.image}
                        className="flex items-center gap-4"
                      >
                        <img
                          src={product.image}
                          alt={product.name}
                          width={20}
                          height={20}
                          className="rounded-md object-cover w-10 aspect-square"
                        />
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="font-semibold">{product.name}</h3>
                            <span className="font-semibold">
                              ${product.price}
                            </span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <span>Cantidad: </span>
                            {product.quantity}
                            <span>Talla: </span>
                            {product.size}
                          </div>
                        </div>
                        <Button variant="ghost" size="icon">
                          <box-icon name="trash" color="#e8e8e6"></box-icon>
                        </Button>
                      </div>
                    ))}
                  </div>
                </DrawerContent>
              </Drawer>
            </div>
          </div>
          <div className="grid gap-8">
            <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
              {filteredProducts.map((product) => (
                <div
                  key={product.code_clothe}
                  className="bg-card text-card-foreground rounded-lg overflow-hidden shadow-sm"
                >
                  <div className="p-4 grid gap-2">
                    <img
                      src={product.clothes[0].image}
                      alt={product.clothes[0].code}
                      width={300}
                      height={300}
                      className="rounded-md object-cover w-full aspect-square"
                    />
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold text-lg">{product.name}</h3>
                      <span className="font-semibold">S/{product.price}</span>
                    </div>
                    <div className="grid gap-2">
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Tallas</h4>
                        <div className="flex gap-2">
                          {sizesUnique(product.clothes).map((size) => (
                            <Badge
                              key={size}
                              variant="outline"
                              className="px-2 py-1"
                            >
                              {size}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Colores</h4>
                        <div className="flex flex-wrap gap-2">
                          {colorUnique(product.clothes).map((color) => {
                            return (
                              <Badge
                                key={color}
                                variant="outline"
                                className={`px-2 py-1 bg-${color}-500 text-${color}-50`}
                              >
                                {color}
                              </Badge>
                            );
                          })}
                        </div>
                      </div>
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button
                            className="w-full flex border-2 border-white items-center justify-center gap-2"
                            size="icon"
                          >
                            <box-icon name="search-alt" color="#fff"></box-icon>
                            Ver producto
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-[425px]">
                          <DialogHeader>
                            <DialogTitle>Referencia del producto</DialogTitle>
                          </DialogHeader>
                          <Carousel className="w-full max-w-4xl relative">
                            <CarouselContent>
                              {product.clothes.map((clote) => (
                                <CarouselItem key={clote.code}>
                                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2 items-center">
                                    <img
                                      src={clote.image}
                                      alt={clote.code}
                                      width={600}
                                      height={600}
                                      className="rounded-lg object-cover w-full aspect-square"
                                    />
                                    <div className="grid gap-4">
                                      <div className="grid gap-2">
                                        <h3 className="text-xl font-bold">
                                          {product.name}
                                        </h3>
                                        <p className="text-muted-foreground">
                                          Talla: {clote.sizes}
                                        </p>
                                      </div>

                                      <div className="flex items-center gap-2">
                                        <p className="text-muted-foreground">
                                          Color: {clote.colors}
                                        </p>
                                      </div>
                                      <Button
                                        type="submit"
                                        onClick={() => addItem(clote, product)}
                                      >
                                        Agregar
                                      </Button>
                                    </div>
                                  </div>
                                </CarouselItem>
                              ))}
                            </CarouselContent>
                            <CarouselPrevious className="absolute left-4 top-1/2 -translate-y-1/2" />
                            <CarouselNext className="absolute right-4 top-1/2 -translate-y-1/2" />
                          </Carousel>
                        </DialogContent>
                      </Dialog>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}
