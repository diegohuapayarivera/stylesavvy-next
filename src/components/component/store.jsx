/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/NdDr7C5cM40
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Prata } from 'next/font/google'
import { Libre_Baskerville } from 'next/font/google'

prata({
  subsets: ['latin'],
  display: 'swap',
})

libre_baskerville({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
/* eslint-disable @next/next/no-img-element */

import { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { agruparProductos } from "@/helpers/getProducts";

export function Store() {
  const [products, setproducts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState([]);
  const [selectedColor, setSelectedColor] = useState([]);
  const [selectedSize, setSelectedSize] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const url =
        "https://script.google.com/macros/s/AKfycbxWVVD2tOQJ6iueTdGIiO1OGxeghIA7jTKur2xoVgLDLn7jyI3AvTRlmz0ug31ALmT2/exec";
      const respuesta = await fetch(url);
      const productos = await respuesta.json();

      const productosDisponibles = productos.filter(producto => producto.estado === "disponible");
      // Agrupa los productos
      const agrupados = agruparProductos(productosDisponibles);
      setproducts(agrupados);
    }

    fetchData();
  }, []);

  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      if (
        selectedCategory.length > 0 &&
        !selectedCategory.some((category) =>
          product.categorys.includes(category)
        )
      ) {
        return false;
      }
      if (
        selectedColor.length > 0 &&
        !selectedColor.some((color) => product.colors.includes(color))
      ) {
        return false;
      }
      if (
        selectedSize.length > 0 &&
        !selectedSize.some((size) => product.sizes.includes(size))
      ) {
        return false;
      }
      return true;
    });
  }, [selectedCategory, selectedColor, selectedSize, products]);
  const handleCategoryChange = (category) => {
    if (selectedCategory.includes(category)) {
      setSelectedCategory(selectedCategory.filter((item) => item !== category));
    } else {
      setSelectedCategory([...selectedCategory, category]);
    }
  };
  const handleColorChange = (color) => {
    if (selectedColor.includes(color)) {
      setSelectedColor(selectedColor.filter((item) => item !== color));
    } else {
      setSelectedColor([...selectedColor, color]);
    }
  };
  const handleSizeChange = (size) => {
    if (selectedSize.includes(size)) {
      setSelectedSize(selectedSize.filter((item) => item !== size));
    } else {
      setSelectedSize([...selectedSize, size]);
    }
  };

  function obtenerCategoriasUnicas(productos) {
    const categorias = new Set();

    productos.forEach((producto) => {
      producto.categorys.forEach((categoria) => {
        categorias.add(categoria);
      });
    });

    return Array.from(categorias);
  }

  function obtenerColoresUnicas(productos) {
    const colores = new Set();

    productos.forEach((producto) => {
      producto.colors.forEach((color) => {
        colores.add(color);
      });
    });

    return Array.from(colores);
  }

  function obtenerTallasUnicas(productos) {
    const tallas = new Set();

    productos.forEach((producto) => {
      producto.sizes.forEach((talla) => {
        tallas.add(talla);
      });
    });

    return Array.from(tallas);
  }
  return (
    <div>
      <header className="bg-primary text-primary-foreground py-4 md:py-6 lg:py-8">
        <div className="container px-4 md:px-6 max-w-10xl mx-auto flex items-center justify-between">
          <Link href="#" prefetch={false}>
            <div className="flex items-center gap-2">
              <img src="/icono4.png" alt="icono" className="h-12 w-12" />
              <span className="text-lg md:text-xl lg:text-3xl font-bold">
                StyleSavvy
              </span>
            </div>
          </Link>
          <nav className="hidden md:flex items-center gap-4 lg:gap-6" />
          <div className="md:hidden" />
        </div>
      </header>
      <div className="container px-4 md:px-6 max-w-6xl mx-auto py-12">
        <div className="grid md:grid-cols-[240px_1fr] gap-8">
          <div>
            <div>
              <div className="hidden md:grid gap-6">
                <h2 className="text-3xl font-bold mb-4">Filtros</h2>
                <Accordion type="single" collapsible>
                  <AccordionItem value="category">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Categoria</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerCategoriasUnicas(products).map((category) => (
                          <Label
                            key={category}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedCategory.includes(category)}
                              onCheckedChange={() =>
                                handleCategoryChange(category)
                              }
                            />
                            {category}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
                <Accordion type="single" collapsible>
                  <AccordionItem value="color">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Color</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerColoresUnicas(products).map((color) => (
                          <Label
                            key={color}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedColor.includes(color)}
                              onCheckedChange={() => handleColorChange(color)}
                            />
                            {color}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
                <Accordion type="single" collapsible>
                  <AccordionItem value="size">
                    <AccordionTrigger className="text-base">
                      <h3 className="text-base font-medium mb-2">Talla</h3>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid gap-2">
                        {obtenerTallasUnicas(products).map((size) => (
                          <Label
                            key={size}
                            className="flex items-center gap-2 font-normal"
                          >
                            <Checkbox
                              checked={selectedSize.includes(size)}
                              onCheckedChange={() => handleSizeChange(size)}
                            />
                            {size}
                          </Label>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
            <div className="md:hidden flex items-center justify-between">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <FilterIcon className="w-4 h-4" />
                    Filtros
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-[300px]">
                  <div className="p-4 grid gap-6">
                    <Accordion type="single" collapsible>
                      <AccordionItem value="category">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">
                            Categoria
                          </h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerCategoriasUnicas(products).map(
                              (category) => (
                                <Label
                                  key={category}
                                  className="flex items-center gap-2 font-normal"
                                >
                                  <Checkbox
                                    checked={selectedCategory.includes(
                                      category
                                    )}
                                    onCheckedChange={() =>
                                      handleCategoryChange(category)
                                    }
                                  />
                                  {category}
                                </Label>
                              )
                            )}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="color">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">Color</h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerColoresUnicas(products).map((color) => (
                              <Label
                                key={color}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={selectedColor.includes(color)}
                                  onCheckedChange={() =>
                                    handleColorChange(color)
                                  }
                                />
                                {color}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="size">
                        <AccordionTrigger className="text-base">
                          <h3 className="text-base font-medium mb-2">Talla</h3>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {obtenerTallasUnicas(products).map((size) => (
                              <Label
                                key={size}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={selectedSize.includes(size)}
                                  onCheckedChange={() => handleSizeChange(size)}
                                />
                                {size}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </div>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <div className="grid gap-8">
            <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
              {filteredProducts.map((product) => (
                <div
                  key={product.id}
                  className="bg-card text-card-foreground rounded-lg overflow-hidden shadow-sm"
                >
                  <div className="p-4 grid gap-2">
                    <img
                      src={product.image}
                      alt={product.name}
                      width={300}
                      height={300}
                      className="rounded-md object-cover w-full aspect-square"
                    />
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold text-lg">{product.name}</h3>
                      <span className="font-semibold">S/{product.price}</span>
                    </div>
                    <div className="grid gap-2">
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Tallas</h4>
                        <div className="flex gap-2">
                          {product.sizes.map((size) => (
                            <Badge
                              key={size}
                              variant="outline"
                              className="px-2 py-1"
                            >
                              {size}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="text-sm font-semibold mb-1">Colores</h4>
                        <div className="flex flex-wrap gap-2">
                          {product.colors.map((color) => (
                            <Badge
                              key={color}
                              variant="outline"
                              className={`px-2 py-1 bg-${color}-500 text-${color}-50`}
                            >
                              {color}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}

function MountainIcon(props) {
  return (
    <svg
      {...props}
      xmlns="/public/icono4.png"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>
  );
}
